from fastapi import FastAPI, HTTPException, Request, Form
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from database.db_manager import init_db, get_db_session, db_manager
from database.models import Domain, Snapshot, Change, Report
from sqlalchemy.orm import Session
from typing import List, Dict, Any
import uvicorn
from datetime import datetime

app = FastAPI(title="Observer", description="–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Observer...")
    if init_db():
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

@app.get("/", response_class=HTMLResponse)
async def dashboard(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - Dashboard"""
    try:
        session = get_db_session()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        domains_count = session.query(Domain).count()
        snapshots_count = session.query(Snapshot).count()
        changes_count = session.query(Change).count()
        reports_count = session.query(Report).count()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        domains = session.query(Domain).filter(Domain.is_active == True).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ)
        recent_changes = []
        
        session.close()
        
        stats = {
            "domains_count": domains_count,
            "snapshots_count": snapshots_count,
            "changes_count": changes_count,
            "reports_count": reports_count
        }
        
        return templates.TemplateResponse("dashboard.html", {
            "request": request,
            "stats": stats,
            "domains": domains,
            "recent_changes": recent_changes
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dashboard: {str(e)}")

@app.get("/domains", response_class=HTMLResponse)
async def domains_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞–º–∏"""
    try:
        session = get_db_session()
        domains = session.query(Domain).all()
        session.close()
        
        return templates.TemplateResponse("domains.html", {
            "request": request,
            "domains": domains
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–µ–Ω–æ–≤: {str(e)}")

@app.get("/snapshots", response_class=HTMLResponse)
async def snapshots_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–Ω–∏–º–∫–æ–≤"""
    try:
        session = get_db_session()
        domains = session.query(Domain).filter(Domain.is_active == True).all()
        session.close()
        
        return templates.TemplateResponse("snapshots.html", {
            "request": request,
            "domains": domains
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–Ω–∏–º–∫–æ–≤: {str(e)}")

@app.get("/reports", response_class=HTMLResponse)
async def reports_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á—ë—Ç–æ–≤"""
    try:
        session = get_db_session()
        reports = session.query(Report).order_by(Report.created_at.desc()).all()
        session.close()
        
        return templates.TemplateResponse("reports.html", {
            "request": request,
            "reports": reports
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–æ–≤: {str(e)}")

# API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    db_info = db_manager.get_database_info()
    return {
        "status": "healthy",
        "database": db_info,
        "message": "Observer —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    }

@app.get("/api/domains", response_model=List[Dict[str, Any]])
def get_domains():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤"""
    try:
        session = get_db_session()
        domains = session.query(Domain).all()
        result = []
        for domain in domains:
            result.append({
                "id": domain.id,
                "name": domain.name,
                "display_name": domain.display_name,
                "is_active": domain.is_active,
                "created_at": domain.created_at.isoformat() if domain.created_at else None
            })
        session.close()
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤: {str(e)}")

@app.post("/api/domains")
def add_domain(name: str = Form(...), display_name: str = Form(None)):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        session = get_db_session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–æ–º–µ–Ω
        existing = session.query(Domain).filter(Domain.name == name).first()
        if existing:
            session.close()
            raise HTTPException(status_code=400, detail="–î–æ–º–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω
        new_domain = Domain(
            name=name,
            display_name=display_name or name
        )
        session.add(new_domain)
        session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –¥–æ–º–µ–Ω–∞
        domain_id = new_domain.id
        session.close()
        
        return {"message": f"–î–æ–º–µ–Ω {name} –¥–æ–±–∞–≤–ª–µ–Ω", "domain_id": domain_id}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞: {str(e)}")

@app.get("/api/snapshots/{domain_id}", response_model=List[Dict[str, Any]])
def get_snapshots(domain_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–Ω–∏–º–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞"""
    try:
        session = get_db_session()
        snapshots = session.query(Snapshot).filter(Snapshot.domain_id == domain_id).order_by(Snapshot.timestamp.desc()).all()
        result = []
        for snapshot in snapshots:
            result.append({
                "id": snapshot.id,
                "timestamp": snapshot.timestamp.isoformat() if snapshot.timestamp else None,
                "status": snapshot.status,
                "page_title": snapshot.page_title,
                "page_url": snapshot.page_url,
                "screenshot_path": snapshot.screenshot_path,
                "html_path": snapshot.html_path,
                "carousel_screenshot_path": snapshot.carousel_screenshot_path
            })
        session.close()
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–æ–≤: {str(e)}")

@app.delete("/api/domains/{domain_id}")
def delete_domain(domain_id: int):
    """–£–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω"""
    try:
        session = get_db_session()
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–µ–Ω
        domain = session.query(Domain).filter(Domain.id == domain_id).first()
        if not domain:
            session.close()
            raise HTTPException(status_code=404, detail="–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–Ω–∏–º–∫–∏
        snapshots_count = session.query(Snapshot).filter(Snapshot.domain_id == domain_id).count()
        if snapshots_count > 0:
            session.close()
            raise HTTPException(status_code=400, detail=f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –¥–æ–º–µ–Ω —Å {snapshots_count} —Å–Ω–∏–º–∫–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å–Ω–∏–º–∫–∏.")
        
        # –£–¥–∞–ª—è–µ–º –¥–æ–º–µ–Ω
        domain_name = domain.name
        session.delete(domain)
        session.commit()
        session.close()
        
        return {"message": f"–î–æ–º–µ–Ω {domain_name} —É–¥–∞–ª–µ–Ω"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞: {str(e)}")

@app.put("/api/domains/{domain_id}/toggle")
def toggle_domain(domain_id: int):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞ (–∞–∫—Ç–∏–≤–Ω—ã–π/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)"""
    try:
        session = get_db_session()
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–µ–Ω
        domain = session.query(Domain).filter(Domain.id == domain_id).first()
        if not domain:
            session.close()
            raise HTTPException(status_code=404, detail="–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        domain.is_active = not domain.is_active
        session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        is_active = domain.is_active
        domain_name = domain.name
        session.close()
        
        status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        return {"message": f"–î–æ–º–µ–Ω {domain_name} {status}", "is_active": is_active}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–µ–Ω–∞: {str(e)}")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)